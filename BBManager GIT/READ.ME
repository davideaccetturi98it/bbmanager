#######
#Copyright Accetturi Davide - Caterina Gambetti
#This software is released under GPL license without any guarantee. The code is OpenSource
#BB Manager Program - This program contains all the functions to manage the server
#######

This project is part of our exam in network for ALMA MATER STUDIORUM BOLOGNA course INGEGNERIA E SCIENZE INFORMATICHE sez.Cesena - Track n.2
Management of check in a Bed and Breakfast totally key-less using RaspberryPI,VPN and WebGUI.

REQUIREMENTS

-Flask library
You need to install flask in order to use the WebGUI manager.
USE: pip install flask

-Raspberry PI OS
You need to use raspberry PI in order to execute GPIO operations, otherwise you will be rejected by the manager program.

-Switch
You need to by a manual switch or create it by yourself. In our case, we have build an analogic switch that is controlled by VCC.
To do it, we used an OptoIsolator that halped us to simulate the pressure of a button thanks to the use of VCC generated by the RingDoor buzzer.

-Relay
In order to open the door and activate the door relay we used an external relay powered by 5VCC kept as out from RPI.
DONT'USE RASPERRY INTEGRATED GPIO AS RELAY WITH HIGH TENSION! YOU WILL BRICK IT OR YOU COULD GET A SHOCK!

-VPN Server/Client (optional)
In case you don't wont to expose your webserver | hardware on internet (mostly case) you can use a VPN system.
We have implemented a cloud Remote Access OpenVPN Server (with a static IP ADDRESS) and our Raspberry is a client like our phones or our devices used as manager.
We alse implemanted a routing table in order to permit each other to communicate.
Thanks to this, our remote connection is now crypthographated and authenticated and we can manage the RPI in a totally secure way.

-Systemctl (optional)
In order to execute this program as a service we have been implemented a systemctl init script.
You can find it in unix/tools dir bbserver.service. You can customize the launch variable in order to start on the same host and port on every reboot.

DESCRIPTION:

- Main
functions implemented
 -run the Web Server as a background process
 -run the BB Server which is listening on local ports (only Linux OS)
 -run the maintenance program from command line (CLI) for BB Server

functions implemented in CLI
 -turn off the BB Server
 -change the time out
 -read the logs about who entered and left the Bed and Breakfast

- set of .py files containing functions are located in assist

 -web.py (must be run with host and port as argument otherwise it will not start!)

Thanks to Flask, the Web Server executes python code including it in html page:
When a button is pressed, Flask calls functions from main.py with the data required.
The function ACTIVATE called from the web page reads a local txt file and activates the python BBServer.
When the user chooses to change the number of impulses and/or the time, the local txt file is updated.
Using local txt files is necessary due to the fact that a database is not present.
The DEACTIVATE button closes the python BBServer, updating the status OFF in the web page if before the server was ON
The VIEW LOGS button

 --bbmanager.py contains the definition of functions used from the CLI.

CLI manipulates files form command line
differing from the Web Server which execute api to do that.

#########################################################################################
Enjoy your use and help us to improve new useful functionality!

